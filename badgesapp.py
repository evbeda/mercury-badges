#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Nov 06, 2018 11:09:11 AM -03  platform: Darwin

import sys
from zebra import zebra
import pickle
import requests
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import badgesapp_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Application (root)
    badgesapp_support.init(root, top)
    root.mainloop()

w = None
def create_Application(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Application (w)
    badgesapp_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Application():
    global w
    w.destroy()
    w = None

def get_printer_list(zebra):
    return zebra.getqueues()

class Application:
    def __init__(self, top=None):

        self.printer_object = zebra()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        font10 = "-family {Helvetica Neue} -size 13 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font11 = "-family {Helvetica Neue} -size 7 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"

        top.geometry("600x400+343+138")
        top.title("Mercury Badges")
        top.configure(background="#F8F7FA")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.PrinterSelectionCanvas = tk.Canvas(top)
        self.PrinterSelectionCanvas.place(relx=0.008, rely=0.013, relheight=0.975
                , relwidth=0.983)
        self.PrinterSelectionCanvas.configure(background="#F8F7FA")
        self.PrinterSelectionCanvas.configure(highlightbackground="#d9d9d9")
        self.PrinterSelectionCanvas.configure(highlightcolor="black")
        self.PrinterSelectionCanvas.configure(insertbackground="black")
        self.PrinterSelectionCanvas.configure(selectbackground="#c4c4c4")
        self.PrinterSelectionCanvas.configure(selectforeground="black")
        self.PrinterSelectionCanvas.configure(width=283)

        self.printer_radio_buttons = []
        self.populate_radio_buttons()

        self.choose_printer_label = tk.Label(self.PrinterSelectionCanvas)
        self.choose_printer_label.place(relx=0.068, rely=0.077, height=24
                , width=122)
        self.choose_printer_label.configure(activebackground="#f9f9f9")
        self.choose_printer_label.configure(activeforeground="black")
        self.choose_printer_label.configure(background="#F8F7FA")
        self.choose_printer_label.configure(foreground="#000000")
        self.choose_printer_label.configure(highlightbackground="#d9d9d9")
        self.choose_printer_label.configure(highlightcolor="black")
        self.choose_printer_label.configure(text='''Choose a printer:''')

        self.disclaimer_label = tk.Label(self.PrinterSelectionCanvas)
        self.disclaimer_label.place(relx=0.042, rely=0.949, height=7, width=221)
        self.disclaimer_label.configure(activebackground="#f9f9f9")
        self.disclaimer_label.configure(activeforeground="black")
        self.disclaimer_label.configure(background="#F8F7FA")
        self.disclaimer_label.configure(font=font11)
        self.disclaimer_label.configure(foreground="#000000")
        self.disclaimer_label.configure(highlightbackground="#d9d9d9")
        self.disclaimer_label.configure(highlightcolor="black")
        self.disclaimer_label.configure(text='''Disclaimer: This app was designed to support only Zebra printers.''')

        self.start_button = tk.Button(self.PrinterSelectionCanvas, command=self.configure_printer)
        self.start_button.place(relx=0.746, rely=0.333, height=22, width=125)
        self.start_button.configure(activebackground="#d9d9d9")
        self.start_button.configure(activeforeground="#000000")
        self.start_button.configure(background="#d9d9d9")
        self.start_button.configure(foreground="#000000")
        self.start_button.configure(highlightbackground="#d9d9d9")
        self.start_button.configure(highlightcolor="black")
        self.start_button.configure(relief='raised')
        self.start_button.configure(text='''Connect printer''')

        self.printer_id_label = tk.Label(self.PrinterSelectionCanvas)
        self.printer_id_label.place(relx=0.797, rely=0.077, height=24, width=71)
        self.printer_id_label.configure(activebackground="#f9f9f9")
        self.printer_id_label.configure(activeforeground="black")
        self.printer_id_label.configure(background="#F8F7FA")
        self.printer_id_label.configure(foreground="#000000")
        self.printer_id_label.configure(highlightbackground="#d9d9d9")
        self.printer_id_label.configure(highlightcolor="black")
        self.printer_id_label.configure(text='''Printer ID''')

        self.printer_id = tk.Text(self.PrinterSelectionCanvas)
        self.printer_id.place(relx=0.746, rely=0.128, relheight=0.056
                , relwidth=0.212)
        self.printer_id.configure(background="white")
        self.printer_id.configure(font="TkTextFont")
        self.printer_id.configure(foreground="black")
        self.printer_id.configure(highlightbackground="#d9d9d9")
        self.printer_id.configure(highlightcolor="black")
        self.printer_id.configure(insertbackground="black")
        self.printer_id.configure(selectbackground="#c4c4c4")
        self.printer_id.configure(selectforeground="black")
        self.printer_id.configure(width=108)
        self.printer_id.configure(wrap='word')

        self.printer_secret = tk.Text(self.PrinterSelectionCanvas)
        self.printer_secret.place(relx=0.746, rely=0.244, relheight=0.056
                , relwidth=0.212)
        self.printer_secret.configure(background="white")
        self.printer_secret.configure(font="TkTextFont")
        self.printer_secret.configure(foreground="black")
        self.printer_secret.configure(highlightbackground="#d9d9d9")
        self.printer_secret.configure(highlightcolor="black")
        self.printer_secret.configure(insertbackground="black")
        self.printer_secret.configure(selectbackground="#c4c4c4")
        self.printer_secret.configure(selectforeground="black")
        self.printer_secret.configure(width=108)
        self.printer_secret.configure(wrap='word')

        self.printer_secret_label = tk.Label(self.PrinterSelectionCanvas)
        self.printer_secret_label.place(relx=0.763, rely=0.205, height=14
                , width=100)
        self.printer_secret_label.configure(activebackground="#f9f9f9")
        self.printer_secret_label.configure(activeforeground="black")
        self.printer_secret_label.configure(background="#F8F7FA")
        self.printer_secret_label.configure(foreground="#000000")
        self.printer_secret_label.configure(highlightbackground="#d9d9d9")
        self.printer_secret_label.configure(highlightcolor="black")
        self.printer_secret_label.configure(text='''Printer Secret''')

        self.restore_connection_details()

        self.static_status_label = tk.Label(self.PrinterSelectionCanvas)
        self.static_status_label.place(relx=0.814, rely=0.41, height=30
                , width=52)
        self.static_status_label.configure(activebackground="#f9f9f9")
        self.static_status_label.configure(activeforeground="black")
        self.static_status_label.configure(background="#F8F7FA")
        self.static_status_label.configure(font=font10)
        self.static_status_label.configure(foreground="#000000")
        self.static_status_label.configure(highlightbackground="#d9d9d9")
        self.static_status_label.configure(highlightcolor="black")
        self.static_status_label.configure(text='''Status''')

        self.status_label = tk.Label(self.PrinterSelectionCanvas)
        self.status_label.place(relx=0.78, rely=0.462, height=24, width=97)
        self.status_label.configure(activebackground="#f9f9f9")
        self.status_label.configure(activeforeground="black")
        self.status_label.configure(background="#F8F7FA")
        self.status_label.configure(foreground="#000000")
        self.status_label.configure(highlightbackground="#d9d9d9")
        self.status_label.configure(highlightcolor="black")
        self.status_label.configure(text='''Booming''')

        self.log_label = tk.Label(self.PrinterSelectionCanvas)
        self.log_label.place(relx=0.034, rely=0.564, height=144, width=415)
        self.log_label.configure(activebackground="#f9f9f9")
        self.log_label.configure(activeforeground="black")
        self.log_label.configure(background="#ffffff")
        self.log_label.configure(foreground="#000000")
        self.log_label.configure(highlightbackground="#d9d9d9")
        self.log_label.configure(highlightcolor="black")
        self.log_label.configure(text='''Log''')

        self.refresh_printer_button = tk.Button(self.PrinterSelectionCanvas)
        self.refresh_printer_button.place(relx=0.110, rely=0.154, height=22
                , width=80)
        self.refresh_printer_button.configure(activebackground="#F8F7FA")
        self.refresh_printer_button.configure(activeforeground="#F8F7FA")
        self.refresh_printer_button.configure(background="#F8F7FA")
        self.refresh_printer_button.configure(foreground="#000000")
        self.refresh_printer_button.configure(highlightbackground="#d9d9d9")
        self.refresh_printer_button.configure(highlightcolor="black")
        self.refresh_printer_button.configure(text='''Refresh''')
        self.refresh_printer_button.configure(command=self.refresh_radio_buttons)

    def configure_printer(self):
        self.save_connection_details()

    def save_connection_details(self):
        conn = {
            "printer_id" : self.printer_id.get('1.0', tk.END).replace('\\n', ''),
            "printer_secret" : self.printer_secret.get('1.0', tk.END).replace('\\n', ''),
        }
        file = open(r'config.pkl', 'wb')
        pickle.dump(conn, file)
        file.close()

    def get_connection_details(self):
        file = open(r'config.pkl', 'rb')
        conn = pickle.load(file)
        file.close()
        return conn

    def restore_connection_details(self):
        try:
            conn = self.get_connection_details()
            self.printer_id.insert(tk.END, conn.get('printer_id'))
            self.printer_secret.insert(tk.END, conn.get('printer_secret'))
        except Exception:
            print('Connection details could not be loaded')

    def refresh_radio_buttons(self):
        for button in self.printer_radio_buttons:
            button.destroy()
        self.populate_radio_buttons()

    def populate_radio_buttons(self):
        it = 0
        if len(self.printer_radio_buttons) > 0:
            for button in self.printer_radio_buttons:
                button.destroy()
        self.selected_printer = tk.StringVar()
        self.printer_radio_buttons = []
        for p in self.printer_object.getqueues():
            printer_radio_button = tk.Radiobutton(self.PrinterSelectionCanvas)
            printer_radio_button.place(
                relx=0.305,
                rely=0.077 + it,
                relheight=0.056,
                relwidth=0.4,
            )
            printer_radio_button.configure(activebackground="#d9d9d9")
            printer_radio_button.configure(activeforeground="#000000")
            printer_radio_button.configure(background="#F8F7FA")
            printer_radio_button.configure(foreground="#000000")
            printer_radio_button.configure(highlightbackground="#d9d9d9")
            printer_radio_button.configure(highlightcolor="black")
            printer_radio_button.configure(justify='left')
            printer_radio_button.configure(text=p)
            printer_radio_button.configure(value=p)
            printer_radio_button.configure(variable=self.selected_printer)
            self.printer_radio_buttons.append(printer_radio_button)
            it += 0.10


if __name__ == '__main__':
    vp_start_gui()